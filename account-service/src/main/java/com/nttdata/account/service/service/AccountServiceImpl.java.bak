package com.nttdata.account.service.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.nttdata.account.service.entity.Account;
import com.nttdata.account.service.model.Customer;
import com.nttdata.account.service.model.MovementAccount;
import com.nttdata.account.service.model.Product;
import com.nttdata.account.service.model.ProductId;
import com.nttdata.account.service.model.TypeCustomer;
import com.nttdata.account.service.model.TypeProduct;
import com.nttdata.account.service.repository.AccountRepository;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class AccountServiceImpl implements AccountService {

	Logger log = LoggerFactory.getLogger(AccountServiceImpl.class);

	@Autowired
	private AccountRepository repository;

	@Autowired
	RestTemplate restTemplate;

	// @Value("${api.customer-service.uri}")
	private String customerService = "http://localhost:8087/customer";

	// @Value("${api.product-service.uri}")
	private String productService = "http://localhost:8083/product";
	
	private String movementAccountService = "http://localhost:8088/movement-account";

	@Override
<<<<<<< HEAD
	public Flux<Account> getAllAccounts() {
		//return repository.findAll().map(account -> ResponseEntity.ok(account));
		return repository.findAll().sort((a,b)->a.getId().compareTo(b.getId()));
=======
	public Flux<Account> findAll() {
		return repository.findAll();
>>>>>>> main
	}

	@Override
	public Mono<Account> save(Account account) {
		return repository.save(account);
	}

	@Override
	public Mono<Account> update(Account account) {
		return repository.save(account);
	}

	@Override
	public Mono<Account> findById(Long id) {
		return repository.findById(id);
	}

	@Override
	public Mono<Void> delete(Long id) {
		return repository.deleteById(id);
	}

	@Override
	public Map<String, Object> registerAccount(Account account) {
		Map<String, Object> hashMap = new HashMap<String, Object>();
		Product product = findProduct(account.getIdProduct()); // obteniendo producto para luego comparar su tipo
		Customer customer = findCustomer(account.getIdCustomer()); // obteniendo cliente para luego comparar su tipo

		log.info("Customer: " + customer.getFirstname());
		log.info("Product: " + product.getDescriptionProducto());

		if (customer.getTypeCustomer() == TypeCustomer.personal) {
			if (product.getTypeProduct() == TypeProduct.pasivos) {
				if (product.getProductId() == ProductId.Ahorro) {
					this.save(account).subscribe(e -> log.info("Message:" + e.toString()));
					hashMap.put("Account: ", "Cuenta de Ahorro registrada");
				}
				if (product.getProductId() == ProductId.CuentaCorriente) {
					this.save(account).subscribe(e -> log.info("Message:" + e.toString()));
					hashMap.put("Account: ", "Cuenta corriente registrada");
				}
				if (product.getProductId() == ProductId.PlazoFijo) {
					this.save(account).subscribe(e -> log.info("Message:" + e.toString()));
					hashMap.put("Account: ", "Cuenta a Plazo fijo registrada");
				}
			} else {
				hashMap.put("Account", "Este servicio es para el registro de cuentas bancarias.");
			}
		} else { // si es del tipo empresarial permitir solo multiples cuentas corrientes
			if (product.getTypeProduct() == TypeProduct.pasivos) {
				if (product.getProductId() == ProductId.CuentaCorriente) {
					this.save(account).subscribe(e -> log.info("Message:" + e.toString()));
					hashMap.put("Account: ", "Cuenta corriente registrada.");
				} else {
					hashMap.put("Account: ", "No es posible abrir una cuenta de " + product.getDescriptionProducto());
				}
			}else {
				hashMap.put("Account", "Este servicio es para el registro de cuentas bancarias.");
			}
		}
		
		return hashMap;
	}

	// busqueda de producto por su id
	@Override
	public Product findProduct(Long id) {
		ResponseEntity<Product> response = restTemplate.exchange(productService + "/" + id, HttpMethod.GET, null,
				new ParameterizedTypeReference<Product>() {});
		if (response.getStatusCode() == HttpStatus.OK) {
			return response.getBody();
		} else {
			return null;
		}
	}

	// busqueda de cliente por id
	@Override
	public Customer findCustomer(Long id) {
		ResponseEntity<Customer> response = restTemplate.exchange(customerService + "/" + id, HttpMethod.GET, null,
				new ParameterizedTypeReference<Customer>() {});
		if (response.getStatusCode() == HttpStatus.OK) {
			return response.getBody();
		} else {
			return null;
		}
	}

	@Override
	public Flux<MovementAccount> consultMovementsAccount(Long idAccount) {
		//consulta de movimientos de la cuenta
		ResponseEntity<List<MovementAccount>> response = restTemplate.exchange(movementAccountService, HttpMethod.GET,
				null, new ParameterizedTypeReference<List<MovementAccount>>() {});
		List<MovementAccount> list;
		if (response.getStatusCode() == HttpStatus.OK) {
			list = response.getBody();
			return Flux.fromIterable(list).filter(movementAccount -> movementAccount.getIdAccount() == idAccount);
		} else {
			return Flux.empty();
		}
	}
}